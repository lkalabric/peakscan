names(frame) = c("name","list")
result <- rbind(result,frame)
}
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
for (i in unique(my_painel$set)) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
print(fsa_dir)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print("Reading ladder from fsa files for validation...")
ladder_data = data.frame(set, inds)
names(ladder_data) = i
ladder_data <- rbind (storing.inds(fsa_dir, channels=5, lets.pullup=FALSE), ladder_data)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
source("~/GitHub/peakscan/markers_info.R")  # S. mansoni microsatellite info
source("~/GitHub/peakscan/markers_info.R")  # S. mansoni microsatellite info
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
for (i in unique(my_painel$set)) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
print(fsa_dir)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print("Reading ladder from fsa files for validation...")
ladder_data = data.frame(set, inds)
names(ladder_data) = i
ladder_data <- rbind (storing.inds(fsa_dir, channels=5, lets.pullup=FALSE), ladder_data)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
for (i in unique(my_painel$set)) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
print(fsa_dir)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(paste("Reading ladder from fsa files",i,"for validation..."))
ladder_data = data.frame(set, inds)
names(ladder_data) = i
ladder_data <- rbind (storing.inds(fsa_dir, channels=5, lets.pullup=FALSE), ladder_data)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
set
i
sets <- unique(my_painel$set)
sets
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
inds <- c()
ladder_data = data.frame()
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(paste("Reading ladder from fsa files",i,"for validation..."))
ladder_inds <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
ladder_data = data.frame(sets, inds)
names(ladder_data) = i
ladder_data <- rbind (i, ladder_inds)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
# Loads package Fragman
# ===============================================================
library('Fragman')
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(paste("Reading ladder from fsa files",i,"for validation..."))
ladder_inds <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
ladder_data = data.frame(sets, inds)
names(ladder_data) = i
ladder_data <- rbind (i, ladder_inds)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
ladder_data
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(paste("Reading ladder from fsa files",i,"for validation..."))
ladder_inds <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
frame = data.frame(sets, ladder_inds)
names(ladder_data) = i
ladder_data <- rbind (ladder_data, frame)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/markers_info.R")  # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=200
sets <- unique(my_painel$set)
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
inds <- c()
fsa_data = data.frame()
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
inds <- c()
fsa_data = data.frame()
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(paste("Reading ladder from fsa files",i,"for validation..."))
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
frame = data.frame(sets, fsa_stored)
names(ladder_data) = i
fsa_data <- rbind (fsa_data, frame)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(paste("Reading fsa files from",i,"for validation..."))
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
frame$set <- i
frame$data <- fsa_stored
names(frame) = i
fsa_data <- rbind (fsa_data, frame)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
frame
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/markers_info.R")  # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=200
sets <- unique(my_painel$set)
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
inds <- c()
fsa_data = data.frame()
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
frame(set, data)
frame$set <- i
frame$data <- fsa_stored
names(frame) = i
fsa_data <- rbind (fsa_data, frame)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
frame
i
frame <- data.frame (set, data)
frame <- data.frame (set = i,data = fsa_stored)
frame
set
frame <- data.frame (set_name = i,data = fsa_stored)
setNames()
setNames()
fsa_stored
frame = data.frame()
typeof(frame)
typeof(fsa_data)
names(frame)
names(fsa_data)
class(frama)
class(frame)
frame <- as.data.frame (set_name = i, data = fsa_stored)
frame <- as.data.frame (set_name = i, data = fsa_stored)
frame <- as.data.frame (fsa_stored)
class fsa_stored
class (fsa_stored)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
i
class (i)
class(frame)
class(fsa_stored)
frame <- as.data.frame (fsa_stored)
teste <- list (1, 2, 3, 4)
teste
teste_frame <- as.data.frame(teste)
gc()
---
title: "MS Genotyping pipeline"
```{r header, include=FALSE}
knitr::opts_chunk$set(echo = TRUE) # This a global statment
# General advises:
# ===============================================================
# 1) use "_" instead of "." in variable and function names;
# 2) separate each block of code with a comment and "=====" whenever possible
# 3) this list will continue growing as soon as I learn more about programming in R...
## MS Genotyping Pipeline
This is an effort to parse microsatellite trace files in fsa format together with epidemiological data to create useful data to be uploaded and analyzed at Online Program SpadeR https://chao.shinyapps.io/SpadeR/.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
## Setup
Required packages installation/loading alongside other source codes
```{r setup}
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/markers_info.R")  # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=200
sets <- unique(my_painel$set)
# General variables
# ===============================================================
threshold=200
sets <- unique(my_painel$set)
## Use Package Fragman
The core of the package Fragman and the workflow of the fragment analysis rely in 4 functions:
```{r sorting_inds}
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
inds <- c()
fsa_data = data.frame()
frame = data.frame()
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
frame <- as.data.frame (fsa_stored)
fsa_data <- rbind (fsa_data, frame)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
View(fsa_stored)
typeof(fsa_stored)
frame <- as.data.frame (fsa_stored)
typeof(fsa_stored)
fsa_data <- c(fsa_data, fsa_stored)
fsa_data
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
fsa_data <- c(fsa_data, fsa_stored)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
length (fsa_data)
names(fsa_data) <- i
i
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
fsa_data <- c(fsa_data, fsa_stored)
names(fsa_data) <- i
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
length(fsa_data)
fsa_data["set1"]
fsa_data[1]
fsa_data[2]
fsa_data[1]
i
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
fsa_data <- c()
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
fsa_data <- c(fsa_data, fsa_stored)
names(fsa_data) <- i
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
sets_genotyped <- c()
fsa_data <- c()
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
sets_genotyped <- c(sets_genotyped, i)
fsa_data <- c(fsa_data, fsa_stored)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
names(fsa_data) <- sets_genotyped
sets_genotyped
fsa_data["set1"]
fsa_data["set2"]
sets
} else {
# Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
sets_genotyped <- c()
fsa_data <- c()
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
sets_genotyped <- c(sets_genotyped, i)
fsa_data <- c(fsa_data, fsa_stored)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
sets_genotyped <- c(sets_genotyped, i)
fsa_data <- c(fsa_data, fsa_stored)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
names(fsa_data) <- sets_genotyped
} else {
# It is a good practice to store all fsa files in a different folder. # Read just one folder at a time
# fsa_dir <- "~/GitHub/peakscan/fsa"
# Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
sets_genotyped <- c()
fsa_data <- c()
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
sets_genotyped <- c(sets_genotyped, i)
fsa_data <- c(fsa_data, fsa_stored)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
names(fsa_data) <- sets_genotyped
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
# ladder.info.attach(stored=fsa_data, ladder=gs600liz,
# ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
### Matching your ladder is a critical step and should only happen once per batch of samples read
for (i in sets_genotyped) {
ladder.info.attach(stored=fsa_data[i], ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
}
print("Matching ladder in",i)
print(paste("Matching ladder in",i))
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
# ladder.info.attach(stored=fsa_data, ladder=gs600liz,
# ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
### Matching your ladder is a critical step and should only happen once per batch of samples read
for (i in sets_genotyped) {
print(paste("Matching ladder in",i))
ladder.info.attach(stored=fsa_data[i], ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
}
# It is a good practice to store all fsa files in a different folder. # Read just one folder at a time
fsa_dir <- "~/GitHub/peakscan/fsa_set1"
# It is a good practice to store all fsa files in a different folder. # Read just one folder at a time
fsa_dir <- "~/GitHub/peakscan/fsa_set1"
fsa_data <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
# Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
sets_genotyped <- c()
fsa_alldata <- c()
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
sets_genotyped <- c(sets_genotyped, i)
fsa_alldata <- c(fsa_alldata, fsa_stored)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
names(fsa_alldata) <- sets_genotyped
# It is a good practice to store all fsa files in a different folder. # Read just one folder at a time
fsa_dir <- "~/GitHub/peakscan/fsa_set1"
fsa_data <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
# Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
sets_genotyped <- c()
fsa_alldata <- c()
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
sets_genotyped <- c(sets_genotyped, i)
fsa_alldata <- c(fsa_alldata, fsa_stored)
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
names(fsa_alldata) <- sets_genotyped
2) ladder.info.attach (uses the information read from the FSA files and a vector containing the ladder information (DNA size of the fragments) and matches the peaks from the channel where the ladder was run with the DNA sizes for all samples. Then loads such information in the R environment for the use of posterior functions
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
ladder.info.attach(stored=fsa_data, ladder=gs600liz,
ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
for (i in sets_genotyped) {
print(paste("Matching ladder in",i))
ladder.info.attach(stored=fsa_alldata[i], ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
}
ladder.info.attach(stored=fsa_alldata["set1"], ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
ladder.info.attach(stored=fsa_alldata["set2"], ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
fsa_alldata[1]
fsa_alldata["set1"]
for (i in 1:2) {
print(paste("Matching ladder in",i))
ladder.info.attach(stored=fsa_alldata[i], ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
}
