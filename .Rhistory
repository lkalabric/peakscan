# Filter files with bad ladder
bad <- which(corro < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_data <- names(bad)
bad_data
ladder.corrector(fsa_data, bad_data, gs600liz, thresh=200)
x <- unlist(list.data.covarrubias)
x
x[1]
x[2]
x <- unlist(list.data.covarrubias, recursive = FALSE)
x
x[1]
x[2]
ladder.corrector(fsa_data, bad_data, gs600liz, thresh=100)
threshold=100
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/smms_info.R")     # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=100
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
ladder
gs600liz
ladder=gs600liz
ladder
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/smms_info.R")     # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=100
# Design panels for set 1
for (x in smms_set_list) {
print x
# Design panels for set 1
for (x in smms_set_list) {
print(x)
}
# Design panels for set 1
for (x in smms_set_list) {
for (y in x) {
print(y)
}
}
z="smms2"
z_painel <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=7000, xlim=c(219,295))
{z}_painel <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=7000, xlim=c(219,295))
$z_painel <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=7000, xlim=c(219,295))
z_painel <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=1000, xlim=c(219,295))
z_painel <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=1000, xlim=c(219,295))
# Design panels for all smms
smms_panels <- unlist (smms_set_list, recursive = TRUE)
smms_panels
smms_panels <- unlist (smms_set1, recursive = TRUE)
smms_panels
for (smms_name in smms_set1) {
print(smms_name)
panel_name=paste(smms_name,"_panel")
print(panel_name)
readline(prompt="Press [enter] to continue"))
smms_set1
for (x in smms_set1) {
print(x)
panel_name=paste(x,"_panel")
print(panel_name)
readline(prompt="Press [enter] to continue"))
for (i in smms_set1) {
print(i)
panel_name=paste(i,"_panel")
print(panel_name)
readline(prompt="Press [enter] to continue"))
f
for (i in smms_set1) {
print(i)
panel_name=paste(i,"_panel")
print(panel_name)
readline(prompt="Press [enter] to continue")
}
for (i in smms_set1) {
print(i)
panel_name=paste0(i,"_panel")
print(panel_name)
readline(prompt="Press [enter] to continue")
}
overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=7000, xlim=c(219,295))
smms_plot <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=7000, xlim=c(219,295))
print("Texto")
View ("Texto")
# Design panels for smms set 1
for (i in smms_set1) {
print(i)
panel_name=paste0(i,"_panel")
print(panel_name)
cat(i,"_panel", sep = "\n")
smms_plot <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=7000, xlim=c(219,295))
readline(prompt="Press [enter] to continue")
}
cat(paste("Creating",i,"panel"), sep="\n")
smms_panel=paste0(i,"_panel")
smms_panel
assign(smms_panel,16)
smms16_panel
# Design panels for smms set 1
for (i in smms_set1) {
smms_panel=paste0(i,"_panel")
cat(paste("Creating",i,"panel"), sep="\n")
painel_plot <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=7000, xlim=c(219,295))
assign(smms_panel,painel_plot)
readline(prompt="Press [enter] to continue")
}
View(painel_plot)
View(painel_plot)
View(smms16_panel)
View(painel_plot)
knitr::opts_chunk$set(echo = TRUE) # This a global statment
# Note:
# ===============================================================
# `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the outputs and plots
# General advises:
# ===============================================================
# 1) use "_" instead of "." in variable and function names;
# 2) separate each block of code with a comment and "=====" whenever possible
# 3) this list will continue growing as soon as I learn more about programming in R...
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/smms_info.R")     # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=100
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
fsa_dir <- "~/GitHub/peakscan/fsa"
# Reads the fsa files and stores them within a list structure
# ===============================================================
fsa_data <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
### Matching your ladder is a critical step and should only happen once per batch of samples read
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro <- unlist(lapply(list.data.covarrubias,function(x){x$corr}))
# Filter files with bad ladder
bad <- which(corro < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_data <- names(bad)
bad_data
knitr::opts_chunk$set(echo = TRUE) # This a global statment
# Note:
# ===============================================================
# `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the outputs and plots
# General advises:
# ===============================================================
# 1) use "_" instead of "." in variable and function names;
# 2) separate each block of code with a comment and "=====" whenever possible
# 3) this list will continue growing as soon as I learn more about programming in R...
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/smms_info.R")     # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=100
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
fsa_dir <- "~/GitHub/peakscan/fsa"
# Reads the fsa files and stores them within a list structure
# ===============================================================
fsa_data <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
### Matching your ladder is a critical step and should only happen once per batch of samples read
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro <- unlist(lapply(list.data.covarrubias,function(x){x$corr}))
# Filter files with bad ladder
bad <- which(corro < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_data <- names(bad)
bad_data
ladder.corrector(fsa_data, bad_data, gs600liz, thresh=threshold)
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/smms_info.R")     # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=200
knitr::opts_chunk$set(echo = TRUE) # This a global statment
# Note:
# ===============================================================
# `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the outputs and plots
# General advises:
# ===============================================================
# 1) use "_" instead of "." in variable and function names;
# 2) separate each block of code with a comment and "=====" whenever possible
# 3) this list will continue growing as soon as I learn more about programming in R...
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/smms_info.R")     # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=200
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
fsa_dir <- "~/GitHub/peakscan/fsa"
# Reads the fsa files and stores them within a list structure
# ===============================================================
fsa_data <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
### Matching your ladder is a critical step and should only happen once per batch of samples read
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro <- unlist(lapply(list.data.covarrubias,function(x){x$corr}))
# Filter files with bad ladder
bad <- which(corro < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_data <- names(bad)
bad_data
ladder.corrector(fsa_data, bad_data, gs600liz, thresh=threshold)
# With the chunk option `results = 'asis'`, you can write out text as raw Markdown content using cat, which can also be mixed with plots
# Design panels for smms set 1
for (i in smms_set1) {
smms_panel=paste0(i,"_panel")
cat(paste("Creating",i,"panel"), sep="\n")
painel_plot <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=7000, xlim=c(219,295))
assign(smms_panel,painel_plot)
readline(prompt="Press [enter] to continue")
}
View(smms2_panel)
smms_set1f <- list(c("smms2", "smms3", "smms16"), c(219,295))
smms_set1f <- list(names="smms2", "smms3", "smms16"), c(219,295))
str(list.data.covarrubias)
smms_set1f <- list("smms2", "smms3", "smms16")
str(smms_set1f)
smms_set1f <- list(1,4,2,c(219,295),c(171,228),c(201,258))
str(smms_set1f)
str(smms_set1f)
smms_set1f <- list(name="channel", children = list (c(1,4,2),c(219,295),c(171,228),c(201,258)))
str(smms_set1f)
smms_set1f <- list(c("smms2",1,c(219,295)),c("smms13",4,c(171,228)),c("smms16",2,c(201,258)))
str(smms_set1f)
smms_set1f$
q
smms_set1f
names(smms_set1f)
smms_set1
smms_set1f
smms_set1f <- list(name= "smms2", chidren=list(c(1,c(219,295))),name="smms13", chidren=list(c(4,c(171,228))),name="smms16",chidren=list(c(2,c(201,258))))
str(smms_set1f)
str(smms_set1f)
smms_set1f$chidren
smms_set1f <- list(name="smms2", chidren=list(c(1,c(219,295))),name="smms13", chidren=list(c(4,c(171,228))),name="smms16",chidren=list(c(2,c(201,258))))
smms_set1f
smms_set1f[1]
smms_set1f[1]$name
smms_set1f$name
str(smms_set1f)
smms_set1f <- list("smms2", chidren=list(c(1,c(219,295))),"smms13", chidren=list(c(4,c(171,228))),"smms16",chidren=list(c(2,c(201,258))))
smms_set1f <- list(smms2, chidren=list(c(1,c(219,295))),smms13, chidren=list(c(4,c(171,228))),smms16,chidren=list(c(2,c(201,258))))
smms_set1f <- list(name=smms2, chidren=list(c(1,c(219,295))),smms13, chidren=list(c(4,c(171,228))),smms16,chidren=list(c(2,c(201,258))))
smms_set1f <- list(name="smms2", channel=list(c(1,c(219,295))),name="smms13", channel=list(c(4,c(171,228))),name="smms16",channel=list(c(2,c(201,258))))
smms_set1f <- list(name="smms2", channel=list(c(1,c(219,295))),name="smms13", channel=list(c(4,c(171,228))),name="smms16",channel=list(c(2,c(201,258))))
str(smms_set1f)
smms_set1f <- list(c(name="smms2", channel=list(c(1,c(219,295))),name="smms13", channel=list(c(4,c(171,228))),name="smms16",channel=list(c(2,c(201,258))))
q
smms_set1f <- list(c(name="smms2", channel=1, x_lim=c(219,295)),c(name="smms13", channel=4, x_lim=c(171,228)),c(name="smms16",channel=2,x_lim=c(201,258)))
smms_set1f <- list(c("smms2", 1, list(c(219,295)),c("smms13", 4, list(c(171,228)),c(smms16",2,list((201,258)))
q
z
q
_
)
q
qq
qq
q
q
q()
smms_set1f <- list(c("smms2", 1, list(c(219,295)),c("smms13", 4, list(c(171,228)),c("smms16",2,list((201,258)))
smms_set1f <- list(c("smms2", 1, list(c(219,295)),c("smms13", 4, list(c(171,228)),c("smms16",2,list(c(201,258)))
smms_set1f <- list(c("smms2", 1, list(c(219,295))),c("smms13", 4, list(c(171,228))),c("smms16",2,list(c(201,258))))
smms_set1f$
smms_set1f[1]
smms_set1f <- c(list("smms2", 1, list(c(219,295))),list("smms13", 4, list(c(171,228))),list("smms16",2,list(c(201,258))))
smms_set1f[1]
smms_set1f[2]
smms_set1f[3]
set1_ms <- list("smms2","smms13","smms16")
set1_ms[1]
set1_ms[2]
set1_ms
set1_ch <- list(1,4,2)
set1_ch
set1_ch
set1_ch[1]
set1_ch[2]
knitr::opts_chunk$set(echo = TRUE) # This a global statment
# Note:
# ===============================================================
# `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the outputs and plots
# General advises:
# ===============================================================
# 1) use "_" instead of "." in variable and function names;
# 2) separate each block of code with a comment and "=====" whenever possible
# 3) this list will continue growing as soon as I learn more about programming in R...
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/smms_info.R")     # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=200
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
fsa_dir <- "~/GitHub/peakscan/fsa"
# Reads the fsa files and stores them within a list structure
# ===============================================================
fsa_data <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
### Matching your ladder is a critical step and should only happen once per batch of samples read
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro <- unlist(lapply(list.data.covarrubias,function(x){x$corr}))
# Filter files with bad ladder
bad <- which(corro < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_data <- names(bad)
bad_data
ladder.corrector(fsa_data, bad_data, gs600liz, thresh=threshold)
# With the chunk option `results = 'asis'`, you can write out text as raw Markdown content using cat, which can also be mixed with plots
# Design panels for smms set 1
for (i in 1:3) {
smms_panel=paste0(set1_smms[i],"_panel")
cat(paste("Creating",smms_panel), sep="\n")
painel_plot <- overview2(my.inds=fsa_data, channel=set1_ch[i], ladder=gs600liz, init.thresh=7000, xlim=set1_x_lim[i])
assign(smms_panel,painel_plot)
readline(prompt="Press [enter] to continue")
}
set1_x_lim
set1_x_lim[1]
painel_plot <- overview2(my.inds=fsa_data, channel=set1_ch[i], ladder=gs600liz, init.thresh=7000, xlim=c(set1_x_lim[i])
assign(smms_panel,painel_plot)
# Design panels for smms set 1
for (i in 1:3) {
# Design panels for smms set 1
for (i in 1:3) {
smms_panel=paste0(set1_smms[i],"_panel")
cat(paste("Creating",smms_panel), sep="\n")
painel_plot <- overview2(my.inds=fsa_data, channel=set1_ch[i], ladder=gs600liz, init.thresh=7000, xlim=c(set1_x_lim[i]))
assign(smms_panel,painel_plot)
readline(prompt="Press [enter] to continue")
}
# Design panels for smms set 1
for (i in 1:3) {
smms_panel=paste0(set1_smms[i],"_panel")
cat(paste("Creating",smms_panel), sep="\n")
painel_plot <- overview2(my.inds=fsa_data, channel=set1_ch[i], ladder=gs600liz, init.thresh=7000, xlim=set1_x_lim[i])
assign(smms_panel,painel_plot)
readline(prompt="Press [enter] to continue")
}
# Design panels for smms set 1
for (i in 1:3) {
smms_panel=paste0(set1_smms[i],"_panel")
cat(paste("Creating",smms_panel), sep="\n")
painel_plot <- overview2(my.inds=fsa_data, channel=set1_ch[i], ladder=gs600liz, init.thresh=7000, xlim=set1_x_lim[i])
assign(smms_panel,painel_plot)
readline(prompt="Press [enter] to continue")
}
knitr::opts_chunk$set(echo = TRUE) # This a global statment
# Note:
# ===============================================================
# `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the outputs and plots
# General advises:
# ===============================================================
# 1) use "_" instead of "." in variable and function names;
# 2) separate each block of code with a comment and "=====" whenever possible
# 3) this list will continue growing as soon as I learn more about programming in R...
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/smms_info.R")     # S. mansoni microsatellite info
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/smms_info.R")     # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=200
# It is a good practice to store all fsa files in a different folder. Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
fsa_dir <- "~/GitHub/peakscan/fsa"
# Reads the fsa files and stores them within a list structure
# ===============================================================
fsa_data <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
### Matching your ladder is a critical step and should only happen once per batch of samples read
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro <- unlist(lapply(list.data.covarrubias,function(x){x$corr}))
# Filter files with bad ladder
bad <- which(corro < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_data <- names(bad)
bad_data
ladder.corrector(fsa_data, bad_data, gs600liz, thresh=threshold)
# With the chunk option `results = 'asis'`, you can write out text as raw Markdown content using cat, which can also be mixed with plots
# Design panels for smms set 1
for (i in 1:3) {
smms_panel=paste0(set1_smms[i],"_panel")
cat(paste("Creating",smms_panel), sep="\n")
x_lim=paste0("c(",set1_x_min[i],",",set1_x_max[i],")")
painel_plot <- overview2(my.inds=fsa_data, channel=set1_ch[i], ladder=gs600liz, init.thresh=7000, xlim=x_lim)
assign(smms_panel,painel_plot)
readline(prompt="Press [enter] to continue")
}
# Design panels for smms set 1
smms2_panel <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=7000, xlim=c(219,295))
smms13_panel <- overview2(my.inds=fsa_data, channel=4, ladder=gs600liz, init.thresh=7000, xlim=c(171,228))
# Design panels for smms set 1
# =========================================================
smms2_panel <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=7000, xlim=c(219,295))
smms13_panel <- overview2(my.inds=fsa_data, channel=4, ladder=gs600liz, init.thresh=7000, xlim=c(171,228))
smms16_panel <- overview2(my.inds=fsa_data, channel=2, ladder=gs600liz, init.thresh=7000, xlim=c(201,258))
my.panel <- locator(type="p", pch=20, col="red")$x
smms2_panel <- locator(type="p", pch=20, col="blue")$x
# Design panels for smms set 1
# =========================================================
smms2_panel <- overview2(my.inds=fsa_data, channel=1, ladder=gs600liz, init.thresh=7000, xlim=c(219,295))
smms2_panel <- locator(type="p", pch=20, col="blue")$x
