length(my_marker_sets$set)
length(my_marker_sets$set1)
x_min = my_marker_sets$x_min[1]
x_max = my_marker_sets$x_max[1]
limit=paste0("c(",x_min,","x_max,")")
limit=paste0("c(",x_min,",",x_max,")")
limit
rm(my.panel)
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/markers_info.R")  # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=100
sets <- unique(my_marker_sets$set)
ch = my_marker_sets$ch[1]
x_min = my_marker_sets$x_min[1]
x_max = my_marker_sets$x_max[1]
limit=paste0("c(",x_min,",",x_max,")")
my.panel <- overview2(my.inds=fsa_alldata[[i]], channel=5, ladder=gs600liz, init.thresh=7000, xlim=limit)
my.panel <- overview2(my.inds=fsa_alldata[[i]], channel=5, ladder=gs600liz, init.thresh=7000, xlim=c(160,230))
limit
#limit=paste0("c(",x_min,",",x_min,")")
limit2 <-c(x_min,x_min)
limit2
limit2 <-c(x_min,x_max)
limit2
my.panel <- overview2(my.inds=fsa_alldata[[i]], channel=5, ladder=gs600liz, init.thresh=7000, xlim=limit2)
my.panel <- overview2(my.inds=fsa_alldata[[i]], channel=5, ladder=gs600liz, init.thresh=7000, xlim=c(x_min,x_max))
ch
my.panel <- overview2(my.inds=fsa_alldata[[i]], channel=ch, ladder=gs600liz, init.thresh=7000, xlim=c(x_min,x_max))
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/markers_info.R")  # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=100
sets <- unique(my_marker_sets$set)
knitr::opts_chunk$set(echo = TRUE) # This a global statment
# Note:
# ===============================================================
# `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the outputs and plots
# General advises:
# ===============================================================
# 1) use "_" instead of "." in variable and function names;
# 2) separate each block of code with a comment and "=====" whenever possible
# 3) this list will continue growing as soon as I learn more about programming in R...
knitr::opts_chunk$set(echo = TRUE) # This a global statment
# Note:
# ===============================================================
# `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the outputs and plots
# General advises:
# ===============================================================
# 1) use "_" instead of "." in variable and function names;
# 2) separate each block of code with a comment and "=====" whenever possible
# 3) this list will continue growing as soon as I learn more about programming in R...
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/gs600liz_info.R") # GS600Liz ladder info
source("~/GitHub/peakscan/markers_info.R")  # S. mansoni microsatellite info
# General variables
# ===============================================================
threshold=100
sets <- unique(my_marker_sets$set)
# It is a good practice to store all fsa files in a different folder. # Read just one folder at a time
fsa_dir <- "~/GitHub/peakscan/fsa_set1"
fsa_data <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
# Maybe we should think about saving each set of files in a different folder (i.e. fsa_set1_dir, fsa_set2_dir, etc.)
# ===============================================================
sets_genotyped <- c()
fsa_alldata <- list()
for (i in sets) {
fsa_dir <- paste0("~/GitHub/peakscan/fsa_",i)
if (length(list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)) > 0) {
list.files(fsa_dir, all.files = TRUE, include.dirs = TRUE, no.. = TRUE)
# Reads the fsa files and stores them within a list structure
# ===============================================================
print(i)
fsa_stored <- storing.inds(fsa_dir, channels=5, lets.pullup=FALSE)
# Include here all step of Fragman instead of accumulate to analyze later!
sets_genotyped <- c(sets_genotyped, i)
fsa_alldata <- c(fsa_alldata, list(fsa_stored))
} else {
print(paste("Directory",fsa_dir,"is empty!"))
}
}
# names(fsa_alldata) <- sets_genotyped
set
View(fsa_data)
View(fsa_alldata)
names(fsa_alldata) <- sets_genotyped
View(fsa_alldata)
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
#ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
### Matching your ladder is a critical step and should only happen once per batch of samples read
for (i in 1:length(sets_genotyped)) {
print(paste("Matching ladder in",sets_genotyped[i]))
ladder.info.attach(stored=fsa_alldata[[i]], ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
readline(prompt = "Press [enter] to continue.")
}
ch = my_marker_sets$ch[1]
x_min = my_marker_sets$x_min[1]
x_max = my_marker_sets$x_max[1]
#limit=paste0("c(",x_min,",",x_min,")")
limit2 <-c(x_min,x_max)
my.panel <- overview2(my.inds=fsa_alldata[[i]], channel=ch, ladder=gs600liz, init.thresh=7000, xlim=c(x_min,x_max))
plot (fsa_data)
rm(list.data.covarrubias)
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
#ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
list_data_covarrubias <- list()
for (i in 1:length(sets_genotyped)) {
print(paste("Matching ladder in",sets_genotyped[i]))
ladder.info.attach(stored=fsa_alldata[[i]], ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
list_data_allcovarrubias <- c(list_data_allcovarrubias, list(list.data.covarrubias))
readline(prompt = "Press [enter] to continue.")
}
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
#ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
list_data_covarrubias <- list()
for (i in 1:length(sets_genotyped)) {
print(paste("Matching ladder in",sets_genotyped[i]))
ladder.info.attach(stored=fsa_alldata[[i]], ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
list_data_allcovarrubias <- c(list_data_allcovarrubias, list(list.data.covarrubias))
readline(prompt = "Press [enter] to continue.")
}
View(list_data_covarrubias)
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
#ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
list_data_allcovarrubias <- list()
for (i in 1:length(sets_genotyped)) {
print(paste("Matching ladder in",sets_genotyped[i]))
ladder.info.attach(stored=fsa_alldata[[i]], ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
list_data_allcovarrubias <- c(list_data_allcovarrubias, list(list.data.covarrubias))
readline(prompt = "Press [enter] to continue.")
}
names(list_data_allcovarrubias) <- sets_genotyped
### Matching your ladder is a critical step and should only happen once per batch of samples read
View(list_data_allcovarrubias)
list.data.covarrubias$`143.1a_D01_2018-10-18.fsa`
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/ladders_info.R") # ladders sizes
source("~/GitHub/peakscan/markers_info.R") # microsatellites sets
# General variables
# ===============================================================
threshold=100
sets <- unique(my_marker_sets$set)
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro <- unlist(lapply(list_data_allcovarrubias$set1,function(x){x$corr}))
# Filter files with bad ladder
bad <- which(corro < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_data <- names(bad)
bad_data
corro
bad
bad_data
a[1]=3
a <- c()
a[1]=3
a[2]=5
a[1]+a[2]
a["set1"]=2
a["set2"]=3
a["set1"]+a["set2"]
a
rm(a)
sets
my_marker_sets
fsa_alldata
fsa_alldata["set1"]
View(fsa_alldata["set1"])
View(fsa_alldata["set2"])
View(fsa_alldata[["set2"])
View(fsa_alldata[["set2"]])
# This piece of code turned out not to be useful since RStudio recognizes missing packages and asks for installation
# ===============================================================
list.of.packages <- c("Fragman","pacman")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Loads package Fragman
# ===============================================================
library('Fragman')
# Loads other source codes
# ===============================================================
source("~/GitHub/peakscan/ladders_info.R") # ladders sizes
source("~/GitHub/peakscan/markers_info.R") # microsatellites sets
# General variables
# ===============================================================
threshold=100
my_sets <- unique(my_marker_sets$set)
# Create the list "list.data.covarrubias" indicating the ladder peaks position, height, weigth, correlation and error identified in each file
# ===============================================================
#ladder.info.attach(stored=fsa_data, ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
list_data_allcovarrubias <- list()
for (i in sets_genotyped) {
print(paste("Matching ladder in",sets_genotyped[i]))
ladder.info.attach(stored=fsa_alldata[[i]], ladder=gs600liz, ladd.init.thresh=threshold, prog=FALSE, draw=TRUE)
list_data_allcovarrubias <- c(list_data_allcovarrubias, list(list.data.covarrubias))
}
names(list_data_allcovarrubias) <- sets_genotyped
### Matching your ladder is a critical step and should only happen once per batch of samples read
list_data_allcovarrubias[["set1"]]
corro <- list()
bad <- list()
bad_samples <- list()
for (i in sets_genotyped)
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro[[i]] <- unlist(lapply(list_data_allcovarrubias$i,function(x){x$corr}))
# Filter files with bad ladder
bad[[i]] <- which(corro < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_data[[i]] <- names(bad)
bad_data
readline(prompt = "Press [enter] to continue.")
corro <- list()
bad <- list()
bad_samples <- list()
for (i in sets_genotyped)
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro[[i]] <- unlist(lapply(list_data_allcovarrubias[[i]],function(x){x$corr}))
# Filter files with bad ladder
bad[[i]] <- which(corro < .9999)
View(corro)
corro <- list()
bad <- c()
bad_samples <- c()
for (i in sets_genotyped)
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro[[i]] <- unlist(lapply(list_data_allcovarrubias[[i]],function(x){x$corr}))
# Filter files with bad ladder
bad[[i]] <- which(corro < .9999)
rm(bad,bad_samples)
corro <- list()
bad <- list()
bad_samples <- list()
for (i in sets_genotyped)
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro[[i]] <- unlist(lapply(list_data_allcovarrubias[[i]],function(x){x$corr}))
# Filter files with bad ladder
bad[[i]] <- which(corro < .9999)
rm(bad,bad_samples)
corro <- list()
bad <- c()
bad_samples <- c()
for (i in sets_genotyped)
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro[[i]] <- unlist(lapply(list_data_allcovarrubias[[i]],function(x){x$corr}))
# Filter files with bad ladder
bad[[i]] <- which(corro < .9999)
corro
typeof(corro)
corro <- list()
bad <- c()
bad_samples <- c()
for (i in sets_genotyped)
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro[[i]] <- unlist(lapply(list_data_allcovarrubias[[i]],function(x){x$corr[[i]]}))
corro <- list()
bad <- c()
bad_samples <- c()
for (i in sets_genotyped)
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro[[i]] <- unlist(lapply(list_data_allcovarrubias[[i]],function(x){x$corr}))
# Filter files with bad ladder
bad[[i]] <- which(corro[[i]] < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_samples[[i]] <- names(bad[[i]])
bad_samples[[i]]
readline(prompt = "Press [enter] to continue.")
}
corro <- list()
bad <- c()
bad_samples <- c()
for (i in sets_genotyped)
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro[[i]] <- unlist(lapply(list_data_allcovarrubias[[i]],function(x){x$corr}))
# Filter files with bad ladder
bad[[i]] <- which(corro[[i]] < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_samples[[i]] <- names(bad[[i]])
bad_samples[[i]]
readline(prompt = "Press [enter] to continue.")
}
corro <- list()
bad <- c()
bad_samples <- c()
for (i in sets_genotyped) {
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
corro[[i]] <- unlist(lapply(list_data_allcovarrubias[[i]],function(x){x$corr}))
# Filter files with bad ladder
bad[[i]] <- which(corro[[i]] < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_samples[[i]] <- names(bad[[i]])
bad_samples[[i]]
readline(prompt = "Press [enter] to continue.")
}
View(corro)
View(bad)
length(bad_samples)
length(bad_samples[[1]])
bad_samples[[i]] == 0
bad_samples[[1]] == 0
length(bad_samples[[1]]) == 0
corro <- list()
bad <- c()
bad_samples <- c()
for (i in sets_genotyped) {
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
print(paste("Testing ladder peaks from samples of",i))
corro[[i]] <- unlist(lapply(list_data_allcovarrubias[[i]],function(x){x$corr}))
# Filter files with bad ladder
bad[[i]] <- which(corro[[i]] < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_samples[[i]] <- names(bad[[i]])
if (lenght(bad_samples[[i]]) == 0) {
print("All samples have a good ladder!")
} else {
print(paste("Here are the bad samples:",bad_samples[[i]]))
}
readline(prompt = "Press [enter] to continue.")
}
corro <- list()
bad <- c()
bad_samples <- c()
for (i in sets_genotyped) {
# Extracts the correlation coeficiente between the ladder peak positions and sizes from the "list.data.covarrubia"
print(paste("Testing ladder peaks from samples of",i))
corro[[i]] <- unlist(lapply(list_data_allcovarrubias[[i]],function(x){x$corr}))
# Filter files with bad ladder
bad[[i]] <- which(corro[[i]] < .9999)
# Extract the file names from the list bad to the vector bad_data and print the results, if any
bad_samples[[i]] <- names(bad[[i]])
if (length(bad_samples[[i]]) == 0) {
print("All samples have a good ladder!")
} else {
print(paste("Here are the bad samples:",bad_samples[[i]]))
}
readline(prompt = "Press [enter] to continue.")
}
my_marker_sets
my_marker_sets[my_marker_sets$set == "set1"]
my_marker_sets$set == "set1"
expression(my_marker_sets$set == "set1")
subset(my_marker_sets, set == "set1")
i
maker_i <- subset(my_marker_sets, set == "set1")
View(maker_i)
i
makers_info = paste0("markers_",i)
markers_info = paste0("markers_",i)
markers_info
assign(markers_info,0)
markers_set2
assign(markers_info, data.frame())
markers_set2
typeof(markers_set2)
i
assign(markers_info, subset(my_marker_sets, set == i))
markers_set2
makers_info
markers_info$marker
markers_info <- subset(my_marker_sets, set == i)
markers_info$marker
markers_info$"smms3"$ch
View(markers_info)
markers_info$set
markers_info$marker["smms3"]
markers_info$marker == "smms3"
df[markers_info$marker == "smms3"]
df[markers_info$marker == "smms3",]
markers_info[markers_info$marker == "smms3",]
markers_info[markers_info$marker == "smms3"]
markers_info[markers_info$marker == "smms3",]
markers_info[markers_info$marker == "smms3",]$ch
markers_info[markers_info$marker == "smms3",]$x_min
fsa_alldata[[i]]
# General loop per batch and marker
# =========================================================
for (i in sets_genotyped) {
#markers_set_name = paste0("markers_",i)
#assign(markers_info, subset(my_marker_sets, set == i))
print(paste("Creating panel from markers of",i,"..."))
markers_info <- subset(my_marker_sets, set == i)
for (j in markers_info$marker) {
print("Working on marker",j,"...")
# Extract values from marker_info data.frame by marker
ch = markers_info[markers_info$marker == j,]$ch
x_min = markers_info[markers_info$marker == j,]$x_min
x_max = markers_info[markers_info$marker == j,]$x_max
my_panel <- overview2(my.inds=fsa_alldata[[i]], channel=ch, ladder=gs600liz, init.thresh=7000, xlim=c(x_min,x_max))
marker_name = paste0("marker_",i,"_",j)
assign(marker_name, my_painel)
print("Done.")
readline(prompt = "Press [enter] to continue.")
}
}
View(maker_i)
View(maker_i)
i
markers_info <- subset(my_marker_sets, set == i)
View(markers_info)
View(maker_i)
markers_info$marker
# General loop per batch and marker
# =========================================================
for (i in sets_genotyped) {
#markers_set_name = paste0("markers_",i)
#assign(markers_info, subset(my_marker_sets, set == i))
print(paste("Creating panel from markers of",i,"..."))
markers_info <- subset(my_marker_sets, set == i)
for (j in markers_info$marker) {
print(paste("Working on marker",j,"..."))
# Extract values from marker_info data.frame by marker
ch = markers_info[markers_info$marker == j,]$ch
x_min = markers_info[markers_info$marker == j,]$x_min
x_max = markers_info[markers_info$marker == j,]$x_max
my_panel <- overview2(my.inds=fsa_alldata[[i]], channel=ch, ladder=gs600liz, init.thresh=7000, xlim=c(x_min,x_max))
marker_name = paste0("marker_",i,"_",j)
assign(marker_name, my_painel)
print("Done.")
readline(prompt = "Press [enter] to continue.")
}
}
markers_info
ch
x_min
x_max
# General loop per batch and marker
# =========================================================
for (i in sets_genotyped) {
#markers_set_name = paste0("markers_",i)
#assign(markers_info, subset(my_marker_sets, set == i))
print(paste("Creating panel from markers of",i,"..."))
markers_info <- subset(my_marker_sets, set == i)
for (j in markers_info$marker) {
print(paste("Working on marker",j,"..."))
# Extract values from marker_info data.frame by marker
ch = markers_info[markers_info$marker == j,]$ch
x_min = markers_info[markers_info$marker == j,]$x_min
x_max = markers_info[markers_info$marker == j,]$x_max
my_panel <- overview2(my.inds=fsa_alldata[[i]], channel=ch, ladder=gs600liz, init.thresh=1000, xlim=c(x_min,x_max))
marker_name = paste0("marker_",i,"_",j)
assign(marker_name, my_painel)
print("Done.")
readline(prompt = "Press [enter] to continue.")
}
}
folder <- "~/myfolder"
folder <- "~/GitHub/peakscan/myfolder"
?my.plants
data(my.plants)
my.plants <- my.plants[1:2]
class(my.plants) <- "fsa_stored"
View(my.plants)
plot(my.plants)
plot(my.plants)
plot(my.plants)
plot(my.plants)
plot(my.plants)
my.ladder <- c(50, 75, 100, 125, 129, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375)
ladder.info.attach(stored=my.plants, ladder=my.ladder)
data(my.plants)
my.plants <- my.plants[1:2]
class(my.plants) <- "fsa_stored"
?my.plants
data(my.plants)
my.plants <- my.plants[1:2]
class(my.plants) <- "fsa_stored"
my.ladder <- c(50, 75, 100, 125, 129, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375)
ladder.info.attach(stored=my.plants, ladder=my.ladder)
my.ladder <- c(50, 75, 100, 125, 129, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375)
ladder.info.attach(stored=my.plants, ladder=my.ladder)
